import telebot
from telebot import types
import gspread
import requests
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
TOKEN = 'my token '
MANAGER_USERNAME = "@vdhub_manager"
MANAGER_CHAT_ID = '7306000384'
USDT_ADDRESS = "TSWWgmHL9XqaqPYSo8rWv47SGQ6go8GCfq"
DISCORD_INVITE = "https://discord.gg/yyNNQpg23g"

bot = telebot.TeleBot(TOKEN)

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("vdhub-credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("VDHUB_Users").sheet1

user_data = {}

# === –°–¢–ê–†–¢ ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç *VDHUB*. –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç.", parse_mode='Markdown')
    bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    chat_id = message.chat.id
    user_data[chat_id]['name'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True))
    bot.send_message(chat_id, "–ù–∞–¥–∞–π—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=markup)

@bot.message_handler(content_types=['contact'])
def get_phone(message):
    chat_id = message.chat.id
    user_data[chat_id]['phone'] = message.contact.phone_number
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –ø–æ—à—Ç—É (–ª–∏—à–µ @gmail.com):")
    bot.register_next_step_handler(message, get_email)

def get_email(message):
    chat_id = message.chat.id
    email = message.text
    if email.endswith("@gmail.com"):
        user_data[chat_id]['email'] = email
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π Discord username:")
        bot.register_next_step_handler(message, get_discord)
    else:
        bot.send_message(chat_id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—à—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, get_email)

def get_discord(message):
    chat_id = message.chat.id
    user_data[chat_id]['discord'] = message.text
    user_data[chat_id]['telegram'] = message.from_user.username or "None"
    user_data[chat_id]['register_date'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    show_main_menu(chat_id)

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–û–ë–†–ê–¢–ò –¢–ê–†–ò–§üõç")
    markup.add("üë§ –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç", "‚ùì –ü—Ä–æ –ø—Ä–æ–¥—É–∫—Ç")
    markup.add("üåê –ù–∞—à—ñ —Ä–µ—Å—É—Ä—Å–∏", "üÜò –î–æ–ø–æ–º–æ–≥–∞")
    bot.send_message(chat_id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚ùì –ü—Ä–æ –ø—Ä–æ–¥—É–∫—Ç")
def about_product(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üéì Education", callback_data="education"),
        types.InlineKeyboardButton("üë• Community", callback_data="community")
    )
    markup.add(types.InlineKeyboardButton("‚ùå –ù–∞–∑–∞–¥", callback_data="close"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º:", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data in ["education", "community", "close"])
def handle_product_choice(call):
    chat_id = call.message.chat.id
    if call.data == "education":
        bot.send_message(chat_id, "üéì Education ‚Äî —Å–∫–æ—Ä–æ –∑ º—è–≤–∏—Ç—å—Å—è. –û—á—ñ–∫—É–π—Ç–µ!")
    elif call.data == "community":
        text = (
            "*VDHUB COMMUNITY ‚Äî all-in-one –µ–∫–æ—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–∞–Ω—ñ–≤*\n\n"
            "*–û—Ç—Ä–∏–º–∞–π –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–∫—Ä–∏—Ç–æ–≥–æ Discord-—Å–µ—Ä–≤–µ—Ä–∞:*\n"
            "‚Ä¢ Trading Zone ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏–ø—Ç—ñ, —Ñ–æ—Ä–µ–∫—Å—É, —á–∞—Ç–∏\n"
            "‚Ä¢ Degen Zone ‚Äî high-risk, –∞—Ä–±—ñ—Ç—Ä–∞–∂, –º–µ–º–∏, —Å–Ω–∞–π–ø—ñ–Ω–≥\n"
            "‚Ä¢ Research & Testnet ‚Äî —Ç–µ—Å—Ç–Ω–µ—Ç–∏, —Ñ–∞—Ä–º—ñ–Ω–≥, —Å–µ–π–ª–∏\n"
            "‚Ä¢ NFT Zone ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞, —Ç—Ä–µ–Ω–¥–∏, –ø—Ä–æ—î–∫—Ç–∏\n"
            "‚Ä¢ Nodes & Validators ‚Äî –Ω–æ–¥–∏, —á–∞—Ç–∏, –≥—ñ–¥–∏\n"
            "‚Ä¢ Knowledge Hub ‚Äî –≥–∞–π–¥–∏, –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è, –∑–∞–ø–∏—Å–∏ –∑—ñ–¥–∑–≤–æ–Ω—ñ–≤\n"
            "‚Ä¢ –°–ø—ñ–ª—å–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ ‚Äî –Ω–µ –ª–∏—à–µ —Ä–æ–±–æ—Ç–∞, –∞ –π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫\n\n"
            "*–í—Å–µ —Ü–µ ‚Äî –≤ –æ–¥–Ω—ñ–π –ø—ñ–¥–ø–∏—Å—Ü—ñ. –¢–∏ –æ–±–∏—Ä–∞—î—à —Ç–µ—Ä–º—ñ–Ω ‚Äî –º–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ*"
        )
        bot.send_message(chat_id, text, parse_mode="Markdown")
        choose_plan(call.message)
    elif call.data == "close":
        bot.delete_message(chat_id, call.message.message_id)

def choose_plan(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("30 –¥–Ω—ñ–≤ ‚Äî 70$", callback_data="plan_30"),
        types.InlineKeyboardButton("90 –¥–Ω—ñ–≤ ‚Äî 200$", callback_data="plan_90"),
        types.InlineKeyboardButton("180 –¥–Ω—ñ–≤ ‚Äî 400$", callback_data="plan_180")
    )
    bot.send_message(message.chat.id, "‚è≥ –û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –ø—ñ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("plan_"))
def choose_payment(call):
    chat_id = call.message.chat.id
    plan_map = {
        "plan_30": (30, 70),
        "plan_90": (90, 200),
        "plan_180": (180, 400)
    }
    days, price = plan_map[call.data]
    user_data[chat_id]["plan"] = f"{days} –¥–Ω—ñ–≤"
    user_data[chat_id]["amount"] = price
    user_data[chat_id]["end_date"] = (datetime.now() + timedelta(days=days)).strftime("%d.%m.%Y")

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ—é", callback_data="pay_crypto"),
        types.InlineKeyboardButton("üè¶ –û–ø–ª–∞—Ç–∏—Ç–∏ —Ñ—ñ–∞—Ç–æ–º", callback_data="pay_fiat")
    )
    bot.send_message(chat_id, f"–í–∏ –æ–±—Ä–∞–ª–∏ {days} –¥–Ω—ñ–≤ ‚Äî {price}$\n–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == "pay_crypto")
def crypto_payment(call):
    chat_id = call.message.chat.id
    amount = user_data[chat_id]["amount"]
    plan = user_data[chat_id]["plan"]
    bot.send_message(chat_id, f"""
üí∏ *–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ—é*

–ê–¥—Ä–µ—Å–∞: `{USDT_ADDRESS}`
–ú–µ—Ä–µ–∂–∞: TRC20
–°—É–º–∞: {amount} USDT
–ü—ñ–¥–ø–∏—Å–∫–∞: {plan}

–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å *—Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó*.
""", parse_mode="Markdown")
    bot.register_next_step_handler(call.message, check_tx_hash)

def check_tx_hash(message):
    chat_id = message.chat.id
    tx_hash = message.text.strip()
    url = f"https://apilist.tronscanapi.com/api/transaction-info?hash={tx_hash}"

    try:
        r = requests.get(url).json()
        if r.get("contractType") == 1 and r["toAddress"] == USDT_ADDRESS:
            amount = int(r.get("amount", 0)) / 1_000_000
            if amount >= user_data[chat_id]["amount"]:
                user_data[chat_id]["paid"] = datetime.now().strftime("%d.%m.%Y")
                sheet.append_row([
                    user_data[chat_id]["name"],
                    user_data[chat_id]["phone"],
                    user_data[chat_id]["email"],
                    user_data[chat_id]["discord"],
                    user_data[chat_id]["telegram"],
                    user_data[chat_id]["register_date"],
                    user_data[chat_id]["paid"],
                    user_data[chat_id]["end_date"]
                ])
                bot.send_message(chat_id, "‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
                bot.send_message(chat_id, f"–û—Å—å –≤–∞—à —ñ–Ω–≤–∞–π—Ç: {DISCORD_INVITE}")
            else:
                bot.send_message(chat_id, f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—è. –í–∏—è–≤–ª–µ–Ω–æ: {amount} USDT")
        else:
            bot.send_message(chat_id, "‚ùå –•–µ—à –Ω–µ –¥—ñ–π—Å–Ω–∏–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é.")
    except Exception as e:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@bot.callback_query_handler(func=lambda c: c.data == "pay_fiat")
def fiat_payment(call):
    chat_id = call.message.chat.id
    user = user_data[chat_id]
    bot.send_message(chat_id, f"–í–∞—à –∑–∞–ø–∏—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ: {MANAGER_USERNAME}")
    text = f"""–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:
–Ü–º º—è: {user['name']}
Telegram: @{user['telegram']}
Email: {user['email']}
Discord: {user['discord']}
–ü–ª–∞–Ω: {user['plan']}
–°—É–º–∞: {user['amount']}$
"""
    bot.send_message(MANAGER_CHAT_ID, text)

@bot.message_handler(func=lambda m: m.text == "üë§ –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç")
def profile(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id, {})
    if user:
        text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:
–Ü–º‚Äô—è: {user.get('name')}
Telegram: @{user.get('telegram')}
Email: {user.get('email')}
Discord: {user.get('discord')}
–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user.get('register_date')}
"""
        bot.send_message(chat_id, text)
    else:
        bot.send_message(chat_id, "–í–∞—Å —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")

@bot.message_handler(func=lambda m: m.text == "üåê –ù–∞—à—ñ —Ä–µ—Å—É—Ä—Å–∏")
def resources(message):
    bot.send_message(message.chat.id, """
Instagram: https://www.instagram.com/vdhub.crypto/
–ö–∞–Ω–∞–ª: https://t.me/vdhub_crypto
–ß–∞—Ç: https://t.me/+xyh5ZckZMWtiNGZk
–°–∞–π—Ç: https://www.vdhubcommunity.com/
""")

@bot.message_handler(func=lambda m: m.text == "üÜò –î–æ–ø–æ–º–æ–≥–∞")
def help_info(message):
    bot.send_message(message.chat.id, f"–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å: {MANAGER_USERNAME}")

# === –ó–∞–ø—É—Å–∫ ===
bot.infinity_polling()
