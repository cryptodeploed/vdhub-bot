import telebot
from telebot import types
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
# –ó–∞–º—ñ–Ω—ñ—Ç—å YOUR_BOT_TOKEN –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –≤—ñ–¥ BotFather
bot = telebot.TeleBot("gggg")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("vdhub_key.json", scope)
client = gspread.authorize(creds)
sheet = client.open("VDHUB_Users").worksheet("–ê—Ä–∫—É—à1")

# –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_data = {}

# === –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è (–ï—Ç–∞–ø 1 & 2) ===
@bot.message_handler(commands=["start"])
def start_handler(message):
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é! –î–∞–≤–∞–π —Ä–æ–∑–ø–æ—á–Ω–µ–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.\n–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    user_data[message.chat.id]["name"] = message.text.strip()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("–ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    markup.add(button)
    bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=markup)

@bot.message_handler(content_types=["contact"])
def get_contact(message):
    user_data[message.chat.id]["phone"] = message.contact.phone_number
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤—ñ–π Email (–º–∞—î –±—É—Ç–∏ @gmail.com):", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_email)

def get_email(message):
    email = message.text.strip()
    if "@gmail.com" not in email:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π email. –ú–∞—î –±—É—Ç–∏ @gmail.com. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, get_email)
        return
    user_data[message.chat.id]["email"] = email
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤—ñ–π Discord username:")
    bot.register_next_step_handler(message, get_discord)

def get_discord(message):
    user_data[message.chat.id]["discord"] = message.text.strip()
    telegram_username = message.from_user.username or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    user_data[message.chat.id]["tg_username"] = telegram_username
    user_data[message.chat.id]["tg_id"] = str(message.chat.id)
    user_data[message.chat.id]["reg_date"] = datetime.now().strftime("%d.%m.%Y %H:%M")
    # –ó–∞–ø–∏—Å –¥–∞–Ω–∏—Ö —É Google –¢–∞–±–ª–∏—Ü—é (–ø–æ—Ä—è–¥–æ–∫: –Ü–º'—è, –¢–µ–ª–µ—Ñ–æ–Ω, Email, Discord, Telegram Username, Telegram ID, –î–∞—Ç–∞)
    sheet.append_row([
        user_data[message.chat.id]["name"],
        user_data[message.chat.id]["phone"],
        user_data[message.chat.id]["email"],
        user_data[message.chat.id]["discord"],
        user_data[message.chat.id]["tg_username"],
        user_data[message.chat.id]["tg_id"],
        user_data[message.chat.id]["reg_date"]
    ])
    bot.send_message(message.chat.id, "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    show_main_menu(message)

# === –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (–ï—Ç–∞–ø 3) ===
def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üéÅ –û–ë–†–ê–¢–ò –¢–ê–†–ò–§", "üë§ –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç")
    markup.row("‚ùì –ü—Ä–æ –ø—Ä–æ–¥—É–∫—Ç", "üåê –ù–∞—à—ñ —Ä–µ—Å—É—Ä—Å–∏", "üÜò –î–æ–ø–æ–º–æ–≥–∞")
    bot.send_message(message.chat.id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é VDHUB", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_menu_buttons(message):
    if message.text == "‚ùì –ü—Ä–æ –ø—Ä–æ–¥—É–∫—Ç":
        show_about_section(message)
    elif message.text == "üéÅ –û–ë–†–ê–¢–ò –¢–ê–†–ò–§":
        show_section(message, "–û–ë–†–ê–¢–ò –¢–ê–†–ò–§", "–¢—É—Ç –±—É–¥–µ –≤–∏–±—ñ—Ä —Ç–∞—Ä–∏—Ñ—É.", "tariff.png")
    elif message.text == "üë§ –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç":
        show_section(message, "–û–°–û–ë–ò–°–¢–ò–ô –ö–ê–ë–Ü–ù–ï–¢", "–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç...", "cabinet.png")
    elif message.text == "üåê –ù–∞—à—ñ —Ä–µ—Å—É—Ä—Å–∏":
        show_section(message, "–ù–ê–®–Ü –†–ï–°–£–†–°–ò", "–ù–∞—à—ñ —Ä–µ—Å—É—Ä—Å–∏ —Ç—É—Ç...", "resources.png")
    elif message.text == "üÜò –î–æ–ø–æ–º–æ–≥–∞":
        show_section(message, "–î–û–ü–û–ú–û–ì–ê", "–ó–≤–µ—Ä–Ω–∏—Å—å –¥–æ @vdhub_manager", "help.png")
    else:
        # —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        pass

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó (–±–∞–Ω–µ—Ä + —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, Shark-style)
def show_section(message, title, text, image_path):
    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close"))
    caption = f"<b>{title}</b>\n\n{text}"
    with open(image_path, "rb") as photo:
        bot.send_photo(message.chat.id, photo=photo, caption=caption, parse_mode="HTML", reply_markup=menu)

# === "–ü—Ä–æ –ø—Ä–æ–¥—É–∫—Ç" (–ï—Ç–∞–ø 3.2, Shark-style) ===
def show_about_section(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üéì Education", callback_data="about_education"),
        types.InlineKeyboardButton("üë• Community", callback_data="about_community")
    )
    markup.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close"))
    with open("about.png", "rb") as photo:
        bot.send_photo(message.chat.id, photo=photo, caption="–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫:", reply_markup=markup)

def show_about_subsection(call, title, text, image_path=None):
    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="about_back"))
    menu.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close"))
    caption = f"<b>{title}</b>\n\n{text}"
    if image_path:
        with open(image_path, "rb") as photo:
            bot.send_photo(call.message.chat.id, photo=photo, caption=caption, parse_mode="HTML", reply_markup=menu)
    else:
        bot.send_message(call.message.chat.id, caption, parse_mode="HTML", reply_markup=menu)

# –û–±—Ä–æ–±–∫–∞ inline –∫–Ω–æ–ø–æ–∫ (callback)
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "close":
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == "about_back":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_about_section(call.message)
    elif call.data == "about_community":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_about_subsection(
            call,
            "Community",
            "VDHUB COMMUNITY ‚Äî all-in-one –µ–∫–æ—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–∞–Ω—ñ–≤\n"
            "–û—Ç—Ä–∏–º–∞–π –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–∫—Ä–∏—Ç–æ–≥–æ Discord-—Å–µ—Ä–≤–µ—Ä–∞, —â–æ –≤–∫–ª—é—á–∞—î:\n\n"
            "‚Ä¢ Trading Zone ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ (–∫—Ä–∏–ø—Ç–∞, —Ñ–æ—Ä–µ–∫—Å), –ø—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏\n"
            "‚Ä¢ Degen Zone ‚Äî high-risk, –ø–∞—Ä—Å–µ—Ä–∏, —Å–Ω–∞–π–ø—ñ–Ω–≥, –º–µ–º–∏\n"
            "‚Ä¢ Research & Testnet ‚Äî —Ç–µ—Å—Ç–Ω–µ—Ç–∏, —Ñ–∞—Ä–º, –∞—ñ—Ä–¥—Ä–æ–ø–∏, –∞–º–±–∞—Å–∞–¥–æ—Ä–∫–∏\n"
            "‚Ä¢ NFT Zone ‚Äî —Ç—Ä–µ–Ω–¥–∏, –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞\n"
            "‚Ä¢ Nodes & Validators ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–¥–∏\n"
            "‚Ä¢ Knowledge Hub ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è, –≥–∞–π–¥–∏, –∑–∞–ø–∏—Å–∏, —à–æ–ø\n\n"
            "–†–µ–≥—É–ª—è—Ä–Ω—ñ –∑—ñ–¥–∑–≤–æ–Ω–∏. –û–¥–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ ‚Äî –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å, –±–µ–∑ –≤–æ–¥–∏.\n–¢–∏ –æ–±–∏—Ä–∞—î—à —Ç–µ—Ä–º—ñ–Ω ‚Äî –º–∏ –¥–∞—î–º–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ.",
            "community.png"
        )
    elif call.data == "about_education":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_about_subsection(
            call,
            "Education",
            "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –ø–æ—Ç—ñ–∫ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ."
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
